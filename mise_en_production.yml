---
- hosts: all
  remote_user: pod

  vars:
    # Username
    user: pod
    mdp: root
    ServerAdmin:
    ServerName: 
    # Timezone
    timezone: 'Europe/Paris'
  roles:
    - yaegashi.blockinfile

  tasks:

    - name: mise en place mysql
      sudo: yes
      remote_user: root
      apt: name={{ item }}
      with_items: 
        - mysql-server
        - mysql-client
        - phpmyadmin

    ###################
    #Create my.cnf file
    ###################

    - name: create my.cnf with lineinfile
      sudo: yes
      lineinfile: dest=/root/.my.cnf 
                  regexp='^' line=''
                  state=present
                  create=True

    - name: add client int the .my.cnf file.. 1
      sudo: yes
      lineinfile: dest=/root/.my.cnf
                  state=present
                  line='[client]'
    - name: add client int the .my.cnf file.. 2 
      sudo: yes
      lineinfile:
        dest: /root/.my.cnf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
        state: present
      with_items:
        - { regexp: 'user =', line: 'user = root' }
        - { regexp: '^#?password = ', line: 'password = {{ mdp }}' }

    # Create a new database with name 'pod'
    - name: create database pod
      mysql_db: name=pod state=present
    - mysql_user: name=pod password="pod" priv=*.*:ALL state=present

    - blockinfile:
        dest: /home/pod/django_projects/pod/pod_project/pod_project/settings-test.py
        backup: yes
        insertafter: "DATABASES = {" 
        content: |
            # MySql pod
                'default': {
                    'ENGINE': 'django.db.backends.mysql',           
                    'NAME': 'pod',                         
                    # The following settings are not used with sqlite3:
                    'USER': 'pod',
                    'PASSWORD': 'pod',
                    'HOST': '',                       
                    'PORT': '',                                 
                    'OPTIONS': { 'init_command': 'SET storage_engine=INNODB;' },        
                }
            }



    - name: remplace la database sqlite par Mysql 1
      lineinfile:
        dest="/home/pod/django_projects/pod/pod_project/pod_project/settings-test.py"
        insertbefore='^#Configuration MySql'
        backup=yes
        line="\"\"\""


    - name: remplace la database sqlite par Mysql 3
      lineinfile:
        dest="/home/pod/django_projects/pod/pod_project/pod_project/settings-test.py"
        insertafter='# END ANSIBLE MANAGED BLOCK'
        backup=yes
        line="\"\"\" "

    - name : creation bdd
      shell: python manage.py syncdb --noinput
      args:
         chdir: /home/pod/django_projects/pod/pod_project/
         executable: /bin/bash

    - name : migration des tables
      shell: python ./manage.py migrate
      args:
         chdir: /home/pod/django_projects/pod/pod_project/
         executable: /bin/bash

    #serveur Web en Frontal

    - name: installation paquets
      sudo: yes
      apt: name={{ item }}
      with_items:
        - apache2
        - apache2.2-common
        - apache2-mpm-prefork
        - apache2-utils
        - libexpat1
        - libapache2-mod-wsgi

    - name: create a virtual host with lineinfile
      sudo: yes
      lineinfile: dest=/etc/apache2/sites-available/pod
                  regexp='^' line=''
                  state=present
                  create=True


    #remplir et activer le vhost à la main 
    - name: ajout du vhost
      sudo: yes
      lineinfile:
        dest="/etc/apache2/sites-available/pod"
        backup=yes
        line="<VirtualHost *"\:"80>{{'\n'}}
              ------ServerAdmin nicolas.can@univ-lille1.fr{{'\n'}}
              ------ServerName pod.univ.fr{{'\n'}}
              ------ServerAlias pod{{'\n'}}
              ------WSGIDaemonProcess pod{{'\n'}}
              ------WSGIProcessGroup pod{{'\n'}}
              ------WSGIScriptAlias / /home/pod/django_projects/pod/pod_project/pod_project/wsgi.py{{'\n'}}
              ------Alias /static/ /home/pod/django_projects/pod/pod_project/static/{{'\n'}}
              ----------<Location \"/static/\">{{'\n'}}
              --------------Options -Indexes{{'\n'}}
              ------</Location>{{'\n'}}
              ------Alias /media/ /home/pod/django_projects/media/{{'\n'}}
              ----------<Location \"/media/\">{{'\n'}}
              --------------Options -Indexes{{'\n'}}
              ------</Location>{{'\n'}}
              ------<Directory /home/pod/django_projects/pod/pod_project/static/>{{'\n'}}
              --------------Order deny,allow{{'\n'}}
              --------------Allow from all{{'\n'}}
              --------------Options FollowSymLinks{{'\n'}}
              --------------AllowOverride None{{'\n'}}
              ------</Directory>{{'\n'}}
              ------<LocationMatch \"\.(jpg|css|gif|pdf|ico)$\">{{'\n'}}
              ------SetHandler None{{'\n'}}
              ------</LocationMatch>{{'\n'}}
              ------AddType video/mp4  .mp4{{'\n'}}
              ------AddType video/webm .webm{{'\n'}}
              ------ErrorLog ${APACHE_LOG_DIR}/pod-error.log{{'\n'}}
              ------CustomLog ${APACHE_LOG_DIR}/pod-access.log combined{{'\n'}}
              ------<Directory /home/pod/django_projects/pod/pod_project/pod_project>{{'\n'}}
              ------------------<Files wsgi.py>{{'\n'}}
              -----------------------Order deny,allow{{'\n'}}
              -----------------------Allow from all{{'\n'}}
              ------------------</Files>{{'\n'}}
              ------</Directory>{{'\n'}}
              </VirtualHost>"


    - name: supprimer les -
      sudo: yes
      replace:
        dest="/etc/apache2/sites-available/pod"
        regexp='-----------------------'
        replace='                       '
        backup=yes

    - name: supprimer les -
      sudo: yes
      replace:
        dest="/etc/apache2/sites-available/pod"
        regexp='------'
        replace='      '
        backup=yes

    - name: supprimer les -
      sudo: yes
      replace:
        dest="/etc/apache2/sites-available/pod"
        regexp='----'
        replace='    '
        backup=yes
    - name: supprimer les -
      sudo: yes
      replace:
        dest="/etc/apache2/sites-available/pod"
        regexp='--'
        replace='  '
        backup=yes


    - name: droit en lecture et en ecriture pour l'utilisateur web (www-data)
      sudo: yes
      shell: chown -R  www-data:www-data /media
      args:
         chdir: /home/pod/django_projects/pod/pod_project
         executable: /bin/bash

    - name: activer vhost
      sudo: yes
      shell: a2ensite pod
      args:
         chdir: /home/pod/django_projects/pod/pod_project
         executable: /bin/bash

    - name: relancer apache2
      sudo: yes
      shell:  /etc/init.d/apache2 stop
      args:
         chdir: /home/pod/django_projects/
         executable: /bin/bash

    - name: relancer apache2
      sudo: yes
      shell:  /etc/init.d/apache2 reload
      args:
         chdir: /home/pod/django_projects/
         executable: /bin/bash

    - name: installation NGINX
      sudo: yes
      apt: name={{ item }} state=present
      with_items:
        - nginx
        - python-flup

    - name: lancement du fastcgi
      shell: python ~/django_projects/pod/pod_project/manage.py runfcgi host=127.0.0.1 port=8080 

    - name: creation pod.conf
      sudo: yes
      file:  path=/etc/nginx/sites-available/pod.conf state=touch

    - name: lien symbolique
      sudo: yes
      file: src=/etc/nginx/sites-available/sample_project.conf dest=/etc/nginx/sites-enabled/pod.conf state=link force=yes

    - name: remplir le pod.conf
      sudo: yes
      lineinfile:
        dest="/etc/nginx/sites-available/pod.conf"
        backup=yes
        line="server { {{'\n'}}
            --listen 80;{{'\n'}}
            --server_name myhostname.com;{{'\n'}}
            --access_log /var/log/nginx/pod.access.log;{{'\n'}}
            --error_log /var/log/nginx/pod.error.log;{{'\n'}}
            --# https://docs.djangoproject.com/en/dev/howto/static-files/#serving-static-files-in-production{{'\n'}}
            --location /static/ { {{'# STATIC_URL'}}{{'\n'}}
            --alias /home/www/myhostname.com/static/; {{'# STATIC_ROOT'}}{{'\n'}}
            ----expires 30d;{{'\n'}}
            --}{{'\n'}}
            --location /media/ { {{'# MEDIA_URL'}}{{'\n'}}
            ----alias /home/www/myhostname/static/; {{'# MEDIA_ROOT'}}{{'\n'}}
            ----expires 30d;{{'\n'}}
            --}{{'\n'}}
            --location / { {{'\n'}}
            ----include fastcgi_params;{{'\n'}}
            ----fastcgi_pass 127.0.0.1:8080;{{'\n'}}
            --}{{'\n'}}
            }"


    - name: supprimer les -
      sudo: yes
      replace:
        dest="/etc/nginx/sites-available/pod.conf"
        regexp='----'
        replace='    '
        backup=yes

    - name: supprimer les -
      sudo: yes
      replace:
        dest="/etc/nginx/sites-available/pod.conf"
        regexp='--'
        replace='  '
        backup=yes
      #config pod.conf à la main relancer NGINX à la main apres avoir rempli pod.conf
    - name: lien symbolique environnement virtuel
      sudo: yes
      remote_user: root
      file: src=/home/pod/.virtualenvs dest=/var/www/.virtualenvs state=link

    - name: Add specified repository into sources list.
      file: path=~/django_projects/pod/pod_project/static state=directory

    #- name: creation du dossier static
    #  shell: mkdir static
    #  ignore_errors: yes
    #  args:
    #     chdir: /home/pod/django_projects/pod/pod_project
    #     executable: /bin/bash

    - name: python collectstatic
      shell: python manage.py collectstatic --noinput
      args:
         chdir: /home/pod/django_projects/pod/pod_project
         executable: /bin/bash
    #lancer le serveur et ajouter une video pour tester